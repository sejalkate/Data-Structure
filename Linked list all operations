#include <stdio.h>
#include <stdlib.h>
void insertL();
void deleteF();
void display();
void insertF();
void deleteL();
void insertR();
void deleteR();

struct node {
    int data;
    struct node *next;
};
struct node *head=NULL;

void main()
{
    int choice;
    do
    {
        printf("*******Menu*******");
        printf("\n1.Insert at last\n2.Delete from front\n3.Display\n4.Insert at front\n5.Delete from last\n6.Random insertion\n7.Random deletion\n8.Exit");
        printf("\n Enter your choice=");
        scanf("%d",&choice);
        switch(choice)
        {
            case 1:
            insertL();
            break;
            case 2:
            deleteF();
            break; 
            case 3:
            display();
            break;
            case 4:
            insertF();
            break;
            case 5:
            deleteL();
            break;
            case 6:
            insertR();
            break;
            case 7:
            deleteR();
            break;
            case 8:
            exit(1);
            break;
            default:
            printf("\n Wrong choice");
        }
        printf("\n If you want to continue press 1=");
        scanf("%d",&choice);
    }while(choice==1);
}

void insertL()
{
    struct node *new, *temp;
    new=(struct node *)malloc(sizeof(struct node));
    if(new==NULL)
    {
        printf("\n Overflow No Space");
    }
    else
    {
        int ele;
        new->next=NULL;
        printf("\n Enter the data=");
        scanf("%d",&ele);
        new->data=ele;
        if(head==NULL)
        {
            head=new;
            printf("\n First node is created successfully...");
        }
        else
        {
          temp=head;
          while(temp->next!=NULL)
          {
              temp=temp->next;
          }
          temp->next=new;
          printf("\n Node is created successfully at last");
        }
              
    }
}

void deleteF()
{
  if(head==NULL)
  {
      printf("\n List is empty");
  }
  else
  {
      struct node *temp;
      temp=head;
      head=temp->next;
      free(temp);
      printf("\n Node deleted successfully from front");
  }
}

void display()
{
    struct node *temp;
    temp=head;
    if(head==NULL)
    {
         printf("\n List is empty");
    }
    else 
    {  
        printf("\n Elements in the list =");
        while(temp!=NULL)
          {
            printf("\n %d",temp->data);
            temp=temp->next;
          }
    }
}

void insertF()
{
    struct node *new, *temp;
    new=(struct node *)malloc(sizeof(struct node));
    if(new==NULL)
    {
        printf("\n Overflow No Space");
    }
    else
    {
        int ele;
        new->next=NULL;
        printf("\n Enter the data=");
        scanf("%d",&ele);
        new->data=ele;
        if(head==NULL)
        {
            head=new;
            printf("\n First node is created successfully...");
        }
        else
        {
         new->data=ele;
         new->next=head;
         head=new;
         printf("\n Node is created successfully at front");
        }
              
    }
}

void deleteL()
{
    struct node *temp, *prev;
    if(head==NULL)
    {
        printf("\n List is empty");
    }
    else
    {
        temp=head;
        while(temp->next!=NULL)
        {
            prev=temp;
            temp=temp->next;
        }
        prev->next=NULL;
        free(temp);
        printf("\n Node deleted successfully from Last");
    }
}

void insertR()
{
    struct node *new, *temp;
    new=(struct node*)malloc(sizeof(struct node));
    temp=head;
    int data_value,key;
    printf("\n Enter the data=");
    scanf("%d",&data_value);
    printf("\n Enter node after you want to insert=");
    scanf("%d",&key);
    while(temp->data!=key)
    {
        temp=temp->next;
    }
    new->data=data_value;
    new->next=temp->next;
    temp->next=new;
    printf("\n Node is inserted successfully after %d",key);
}

void deleteR()
{
    int key;
    struct node *temp, *new;
    if(head==NULL)
    {
    printf("\n List is empty, nothing to delete");
    }
    else
    {
    printf("\n Enter the node which you want to delete=");
    scanf("%d",&key);
    temp=head;
    if(temp->data==key)
    {
        head=temp->next;
        free(temp);
    }
    else
    {
        while(temp->data!=key)
    {
        new=temp;
        temp=temp->next;
    }
    if(temp->data==key)
    {
        new->next=temp->next;
        free(temp);
    }
    }
     printf("\n Node deleted successfully");
   }
}
